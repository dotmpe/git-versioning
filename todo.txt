x 2016-03-25 2019-01-27 TODO: development, stabilization, release. Can some scripts help? Looking at the tools and issues. <doc/dev.rst> Moved all focus to +U_s and will probably be moving src/doc content there too while progressing.

2017-03-07 TODO: add & test basher install <ReadMe.rst>
[2019-01-26 TODO: some ID line specs, guidelines
2019-01-26 TODO: update comment regexes and list supported somewwere `\/\/|..|--|;|comment|rem|::|"|#` <doc/manual.rst>
TODO: resolve TODO.list back @Tasks Moving workflow analysis back to +U_s for now, may move GIT hook installer/manager evaluation here later.
# ----

.version-attributes:# TODO: Main-File-Key: Version
ReadMe.rst:FIXME: Building the tar distributable is left to a Mkdocs (Makefile) setup, but
TODO.list:TODO: see doc/dev issue list and cleanup tasks below.
TODO.list:FIXME: test $(PROJECT)-$(VERSION).tar generated by make for production
TODO.list:    FIXME: scan all [id|version]...[app-name] lines, fail on version mismatch
TODO.list:TODO: make bash compatible
TODO.list:    TODO: read_doc_version $_path $key || err "doc version" 1
TODO.list:lib/git-versioning.sh:73:  # XXX: would need some mime header parser. probably keep using first row from doc list or mark table entry
TODO.list:lib/git-versioning.sh:85:  # XXX: Might use comment on the same line as version, but would need to review regexes for all formats.
TODO.list:lib/git-versioning.sh:87:  # XXX: For JSON, take any "name" key. Works for package.json.
TODO.list:tools/cmd/version-check.sh:21:  # XXX: should want to know if any mismatches, regardless wether one matches
doc/dev.rst:  XXX: current Status field behaviour is undocumented, see pre-commit. there's release,
doc/dev.rst:    XXX: After each version update, any downstream branch that has its own version (tags)
doc/dev.rst:    XXX: It should pay therefore to have tags pointing to these version-update commits.
doc/dev.rst:TODO: maybe rename git-version{ing,}
doc/dev.rst:TODO: kw expansion with git attributes
doc/dev.rst:TODO: basherpm/basher seems like a nice easy way to install. Resolve some path
doc/dev.rst:  XXX: not directly a semver, but git describe also offers a version tag for the current commit (last tag, number of commits since, abbrev commit sha and dirty flag)::
doc/dev.rst:  XXX: article on issues with embedded versions introduces python setup tool 'Versioneer'; this uses the git describe version, and placeholder expansion in _version.py upon moving code to dist (git archive). This git describe version thing is not really suited for embedded versions since its always about the last commit.
doc/initial-analysis.rst:| TODO: use complete semver and variations for testing.
doc/initial-analysis.rst:| TODO: some integration with GIT frontend? Some ideas:
doc/initial-analysis.rst:- XXX: Tags using project name (``app-name/0.0.1``) are nice when dealing with
install-dependencies.sh:      # FIXME: last I checked this was broken. See tools/git-hooks
install.sh:	# TODO: make symlink relative
lib/git-versioning.sh:  # XXX: Might use comment on the same line as version, but would need to review
lib/git-versioning.sh:  # XXX: For JSON, take any "name" key. Works for package.json.
lib/git-versioning.sh:        # TODO: read_doc_version $_path $key || err "doc version" 1
lib/util.sh:# TODO: make sed fail on no match, return 1
lib/util.sh:# XXX: this one support leading whitespace but others in ~/bin/*.sh do not
local-formats.sh:# Local formats: FIXME: for testing local extensions to lib/formats.sh
test/git-versioning.spec:  - FIXME: should try to write scanner that uses pattern/template combos
test/helpers.bash:# FIXME: capture output in file for grep ops
tools/cmd/version-check.sh:  # FIXME: scan all [id|version]...[app-name] lines, fail on version mismatch
tools/cmd/version-check.sh:  # XXX: should want to know if any mismatches, regardless wether one matches
